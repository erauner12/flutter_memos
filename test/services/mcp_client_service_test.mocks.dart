// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_memos/test/services/mcp_client_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_memos/models/mcp_server_config.dart' as _i6;
import 'package:flutter_memos/providers/mcp_server_config_provider.dart' as _i3;
import 'package:flutter_memos/services/gemini_service.dart' as _i11;
import 'package:flutter_memos/services/mcp_client_service.dart' as _i8;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i4;
import 'package:google_generative_ai/google_generative_ai.dart' as _i10;
import 'package:mcp_dart/mcp_dart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:state_notifier/state_notifier.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCallToolResult_1 extends _i1.SmartFake
    implements _i2.CallToolResult {
  _FakeCallToolResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [McpServerConfigNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMcpServerConfigNotifier extends _i1.Mock
    implements _i3.McpServerConfigNotifier {
  MockMcpServerConfigNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i4.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<List<_i6.McpServerConfig>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<List<_i6.McpServerConfig>>.empty(),
      ) as _i5.Stream<List<_i6.McpServerConfig>>);

  @override
  List<_i6.McpServerConfig> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i6.McpServerConfig>[],
      ) as List<_i6.McpServerConfig>);

  @override
  set state(List<_i6.McpServerConfig>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i6.McpServerConfig> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: <_i6.McpServerConfig>[],
      ) as List<_i6.McpServerConfig>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> loadConfiguration() => (super.noSuchMethod(
        Invocation.method(
          #loadConfiguration,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> addServer(_i6.McpServerConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #addServer,
          [config],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> updateServer(_i6.McpServerConfig? updatedConfig) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateServer,
          [updatedConfig],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> removeServer(String? serverId) => (super.noSuchMethod(
        Invocation.method(
          #removeServer,
          [serverId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> toggleServerActive(
    String? serverId,
    bool? isActive,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleServerActive,
          [
            serverId,
            isActive,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  bool updateShouldNotify(
    List<_i6.McpServerConfig>? old,
    List<_i6.McpServerConfig>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.RemoveListener addListener(
    _i7.Listener<List<_i6.McpServerConfig>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i4.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GoogleMcpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMcpClient extends _i1.Mock implements _i8.GoogleMcpClient {
  MockGoogleMcpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get serverId => (super.noSuchMethod(
        Invocation.getter(#serverId),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#serverId),
        ),
      ) as String);

  @override
  _i2.Client get mcpClient => (super.noSuchMethod(
        Invocation.getter(#mcpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#mcpClient),
        ),
      ) as _i2.Client);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  List<_i10.Tool> get availableTools => (super.noSuchMethod(
        Invocation.getter(#availableTools),
        returnValue: <_i10.Tool>[],
      ) as List<_i10.Tool>);

  @override
  void setupCallbacks({
    dynamic Function(
      String,
      String,
    )? onError,
    dynamic Function(String)? onClose,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setupCallbacks,
          [],
          {
            #onError: onError,
            #onClose: onClose,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> connectToServer(_i6.McpServerConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #connectToServer,
          [config],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.CallToolResult> callTool(_i2.CallToolRequestParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #callTool,
          [params],
        ),
        returnValue: _i5.Future<_i2.CallToolResult>.value(_FakeCallToolResult_1(
          this,
          Invocation.method(
            #callTool,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.CallToolResult>);

  @override
  _i5.Future<void> cleanup() => (super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [GeminiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeminiService extends _i1.Mock implements _i11.GeminiService {
  MockGeminiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<_i10.GenerateContentResponse> generateContent(
    String? prompt,
    List<_i10.Content>? history, {
    List<_i10.Tool>? tools,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateContent,
          [
            prompt,
            history,
          ],
          {#tools: tools},
        ),
        returnValue: _i5.Future<_i10.GenerateContentResponse>.value(
            _i9.dummyValue<_i10.GenerateContentResponse>(
          this,
          Invocation.method(
            #generateContent,
            [
              prompt,
              history,
            ],
            {#tools: tools},
          ),
        )),
      ) as _i5.Future<_i10.GenerateContentResponse>);

  @override
  _i5.Stream<_i10.GenerateContentResponse> sendMessageStream(
    String? prompt,
    List<_i10.Content>? history,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessageStream,
          [
            prompt,
            history,
          ],
        ),
        returnValue: _i5.Stream<_i10.GenerateContentResponse>.empty(),
      ) as _i5.Stream<_i10.GenerateContentResponse>);
}
