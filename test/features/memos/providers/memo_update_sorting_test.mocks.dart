// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_memos/test/features/memos/providers/memo_update_sorting_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i9;

import 'package:flutter_memos/models/comment.dart' as _i4;
import 'package:flutter_memos/models/list_notes_response.dart' as _i2;
import 'package:flutter_memos/models/note_item.dart' as _i3;
import 'package:flutter_memos/models/server_config.dart' as _i8;
import 'package:flutter_memos/services/base_api_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeListNotesResponse_0 extends _i1.SmartFake
    implements _i2.ListNotesResponse {
  _FakeListNotesResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNoteItem_1 extends _i1.SmartFake implements _i3.NoteItem {
  _FakeNoteItem_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComment_2 extends _i1.SmartFake implements _i4.Comment {
  _FakeComment_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseApiService extends _i1.Mock implements _i5.BaseApiService {
  @override
  String get apiBaseUrl => (super.noSuchMethod(
        Invocation.getter(#apiBaseUrl),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#apiBaseUrl),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#apiBaseUrl),
        ),
      ) as String);

  @override
  bool get isConfigured => (super.noSuchMethod(
        Invocation.getter(#isConfigured),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<void> configureService({
    required String? baseUrl,
    required String? authToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #configureService,
          [],
          {
            #baseUrl: baseUrl,
            #authToken: authToken,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.ListNotesResponse> listNotes({
    int? pageSize,
    String? pageToken,
    String? filter,
    String? state,
    String? sort,
    String? direction,
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listNotes,
          [],
          {
            #pageSize: pageSize,
            #pageToken: pageToken,
            #filter: filter,
            #state: state,
            #sort: sort,
            #direction: direction,
            #targetServerOverride: targetServerOverride,
          },
        ),
        returnValue:
            _i7.Future<_i2.ListNotesResponse>.value(_FakeListNotesResponse_0(
          this,
          Invocation.method(
            #listNotes,
            [],
            {
              #pageSize: pageSize,
              #pageToken: pageToken,
              #filter: filter,
              #state: state,
              #sort: sort,
              #direction: direction,
              #targetServerOverride: targetServerOverride,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.ListNotesResponse>.value(_FakeListNotesResponse_0(
          this,
          Invocation.method(
            #listNotes,
            [],
            {
              #pageSize: pageSize,
              #pageToken: pageToken,
              #filter: filter,
              #state: state,
              #sort: sort,
              #direction: direction,
              #targetServerOverride: targetServerOverride,
            },
          ),
        )),
      ) as _i7.Future<_i2.ListNotesResponse>);

  @override
  _i7.Future<_i3.NoteItem> getNote(
    String? id, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNote,
          [id],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #getNote,
            [id],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #getNote,
            [id],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
      ) as _i7.Future<_i3.NoteItem>);

  @override
  _i7.Future<_i3.NoteItem> createNote(
    _i3.NoteItem? note, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNote,
          [note],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #createNote,
            [note],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #createNote,
            [note],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
      ) as _i7.Future<_i3.NoteItem>);

  @override
  _i7.Future<_i3.NoteItem> updateNote(
    String? id,
    _i3.NoteItem? note, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [
            id,
            note,
          ],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #updateNote,
            [
              id,
              note,
            ],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #updateNote,
            [
              id,
              note,
            ],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
      ) as _i7.Future<_i3.NoteItem>);

  @override
  _i7.Future<void> deleteNote(
    String? id, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [id],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i3.NoteItem> archiveNote(
    String? id, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #archiveNote,
          [id],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #archiveNote,
            [id],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #archiveNote,
            [id],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
      ) as _i7.Future<_i3.NoteItem>);

  @override
  _i7.Future<_i3.NoteItem> togglePinNote(
    String? id, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #togglePinNote,
          [id],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #togglePinNote,
            [id],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.NoteItem>.value(_FakeNoteItem_1(
          this,
          Invocation.method(
            #togglePinNote,
            [id],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
      ) as _i7.Future<_i3.NoteItem>);

  @override
  _i7.Future<List<_i4.Comment>> listNoteComments(
    String? noteId, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listNoteComments,
          [noteId],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<List<_i4.Comment>>.value(<_i4.Comment>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i4.Comment>>.value(<_i4.Comment>[]),
      ) as _i7.Future<List<_i4.Comment>>);

  @override
  _i7.Future<_i4.Comment> getNoteComment(
    String? commentId, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNoteComment,
          [commentId],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<_i4.Comment>.value(_FakeComment_2(
          this,
          Invocation.method(
            #getNoteComment,
            [commentId],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i4.Comment>.value(_FakeComment_2(
          this,
          Invocation.method(
            #getNoteComment,
            [commentId],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
      ) as _i7.Future<_i4.Comment>);

  @override
  _i7.Future<_i4.Comment> createNoteComment(
    String? noteId,
    _i4.Comment? comment, {
    _i8.ServerConfig? targetServerOverride,
    List<Map<String, dynamic>>? resources,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNoteComment,
          [
            noteId,
            comment,
          ],
          {
            #targetServerOverride: targetServerOverride,
            #resources: resources,
          },
        ),
        returnValue: _i7.Future<_i4.Comment>.value(_FakeComment_2(
          this,
          Invocation.method(
            #createNoteComment,
            [
              noteId,
              comment,
            ],
            {
              #targetServerOverride: targetServerOverride,
              #resources: resources,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i4.Comment>.value(_FakeComment_2(
          this,
          Invocation.method(
            #createNoteComment,
            [
              noteId,
              comment,
            ],
            {
              #targetServerOverride: targetServerOverride,
              #resources: resources,
            },
          ),
        )),
      ) as _i7.Future<_i4.Comment>);

  @override
  _i7.Future<_i4.Comment> updateNoteComment(
    String? commentId,
    _i4.Comment? comment, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNoteComment,
          [
            commentId,
            comment,
          ],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<_i4.Comment>.value(_FakeComment_2(
          this,
          Invocation.method(
            #updateNoteComment,
            [
              commentId,
              comment,
            ],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i4.Comment>.value(_FakeComment_2(
          this,
          Invocation.method(
            #updateNoteComment,
            [
              commentId,
              comment,
            ],
            {#targetServerOverride: targetServerOverride},
          ),
        )),
      ) as _i7.Future<_i4.Comment>);

  @override
  _i7.Future<void> deleteNoteComment(
    String? noteId,
    String? commentId, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNoteComment,
          [
            noteId,
            commentId,
          ],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setNoteRelations(
    String? noteId,
    List<Map<String, dynamic>>? relations, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setNoteRelations,
          [
            noteId,
            relations,
          ],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<Map<String, dynamic>> uploadResource(
    _i9.Uint8List? fileBytes,
    String? filename,
    String? contentType, {
    _i8.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadResource,
          [
            fileBytes,
            filename,
            contentType,
          ],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<bool> checkHealth() => (super.noSuchMethod(
        Invocation.method(
          #checkHealth,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}
