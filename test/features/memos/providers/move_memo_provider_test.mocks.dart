// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_memos/test/features/memos/providers/move_memo_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i6;

import 'package:flutter_memos/models/note_item.dart' as _i9;
import 'package:flutter_memos/models/server_config.dart' as _i7;
import 'package:flutter_memos/providers/note_providers.dart' as _i2;
import 'package:flutter_memos/services/base_api_service.dart' as _i3;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:state_notifier/state_notifier.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotesState_0 extends _i1.SmartFake implements _i2.NotesState {
  _FakeNotesState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseApiService extends _i1.Mock implements _i3.BaseApiService {
  @override
  String get apiBaseUrl => (super.noSuchMethod(
        Invocation.getter(#apiBaseUrl),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#apiBaseUrl),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#apiBaseUrl),
        ),
      ) as String);

  @override
  bool get isConfigured => (super.noSuchMethod(
        Invocation.getter(#isConfigured),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> configureService({
    required String? baseUrl,
    required String? authToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #configureService,
          [],
          {
            #baseUrl: baseUrl,
            #authToken: authToken,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> checkHealth() => (super.noSuchMethod(
        Invocation.method(
          #checkHealth,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, dynamic>> uploadResource(
    _i6.Uint8List? fileBytes,
    String? filename,
    String? contentType, {
    _i7.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadResource,
          [
            fileBytes,
            filename,
            contentType,
          ],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<_i6.Uint8List> getResourceData(
    String? resourceIdentifier, {
    _i7.ServerConfig? targetServerOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getResourceData,
          [resourceIdentifier],
          {#targetServerOverride: targetServerOverride},
        ),
        returnValue: _i5.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
        returnValueForMissingStub:
            _i5.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i5.Future<_i6.Uint8List>);
}

/// A class which mocks [NotesNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesNotifier extends _i1.Mock implements _i2.NotesNotifier {
  @override
  set onError(_i8.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Stream<_i2.NotesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.NotesState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i2.NotesState>.empty(),
      ) as _i5.Stream<_i2.NotesState>);

  @override
  _i2.NotesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNotesState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNotesState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.NotesState);

  @override
  set state(_i2.NotesState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.NotesState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeNotesState_0(
          this,
          Invocation.getter(#debugState),
        ),
        returnValueForMissingStub: _FakeNotesState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.NotesState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> fetchInitialPage() => (super.noSuchMethod(
        Invocation.method(
          #fetchInitialPage,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> fetchMoreNotes() => (super.noSuchMethod(
        Invocation.method(
          #fetchMoreNotes,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void updateNoteOptimistically(_i9.NoteItem? updatedNote) =>
      super.noSuchMethod(
        Invocation.method(
          #updateNoteOptimistically,
          [updatedNote],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeNoteOptimistically(String? noteId) => super.noSuchMethod(
        Invocation.method(
          #removeNoteOptimistically,
          [noteId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void archiveNoteOptimistically(String? noteId) => super.noSuchMethod(
        Invocation.method(
          #archiveNoteOptimistically,
          [noteId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void togglePinOptimistically(String? noteId) => super.noSuchMethod(
        Invocation.method(
          #togglePinOptimistically,
          [noteId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void bumpNoteOptimistically(String? noteId) => super.noSuchMethod(
        Invocation.method(
          #bumpNoteOptimistically,
          [noteId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> updateNoteStartDate(
    String? noteId,
    DateTime? newStartDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNoteStartDate,
          [
            noteId,
            newStartDate,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool updateShouldNotify(
    _i2.NotesState? old,
    _i2.NotesState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.RemoveListener addListener(
    _i10.Listener<_i2.NotesState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i8.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
