// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.
import 'package:flutter/cupertino.dart'; // Import Cupertino
import 'package:flutter/material.dart'; // Import Material for ThemeMode
import 'package:flutter_memos/main.dart';
import 'package:flutter_memos/models/memo.dart';
import 'package:flutter_memos/models/multi_server_config_state.dart';
import 'package:flutter_memos/models/server_config.dart';
import 'package:flutter_memos/providers/api_providers.dart' as providers;
// Import necessary providers and models
import 'package:flutter_memos/providers/server_config_provider.dart';
import 'package:flutter_memos/providers/theme_provider.dart'; // Assuming theme provider exists
import 'package:flutter_memos/services/api_service.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:shared_preferences/shared_preferences.dart'; // Import SharedPreferences

// Generate nice mock for ApiService
@GenerateNiceMocks([MockSpec<ApiService>()])
import 'app_test.mocks.dart'; // Corrected import

// Mock Notifier (if not already generated by build_runner)
class MockMultiServerConfigNotifier
    extends StateNotifier<MultiServerConfigState>
    implements MultiServerConfigNotifier {
  MockMultiServerConfigNotifier(super.initialState);

  @override
  Future<void> loadConfiguration() async {
    // Do nothing, state is already set
    return Future.value();
  }

  // Add dummy implementations for other required methods
  @override
  Future<bool> addServer(ServerConfig config) async {
    // Mock implementation, does nothing but returns success
    return Future.value(true);
  }

  @override
  Future<bool> removeServer(String serverId) async {
    // Mock implementation, does nothing but returns success
    return Future.value(true);
  }

  @override
  void setActiveServer(String? serverId) {
    // Mock implementation, does nothing
  }

  @override
  Future<bool> setDefaultServer(String? serverId) async {
    // Mock implementation, does nothing but returns success
    return Future.value(true);
  }

  @override
  Future<bool> updateServer(ServerConfig updatedConfig) async {
    // Mock implementation, does nothing but returns success
    return Future.value(true);
  }
}


void main() {
  late MockApiService mockApiService;
  late List<Memo> testMemos;

  setUp(() {
    // Initialize the mock API service
    mockApiService = MockApiService();

    // Add stub for apiBaseUrl property
    when(mockApiService.apiBaseUrl).thenReturn('http://test-url.com');

    // Mock SharedPreferences before any provider access
    SharedPreferences.setMockInitialValues({
      // Mock theme preference if theme provider reads from it directly
      // 'theme_mode': 'dark', // Example
    });

    // Create test memos
    testMemos = [
      Memo(
        id: 'memo-1',
        content: 'First test memo',
        createTime:
            DateTime.now().subtract(const Duration(days: 1)).toIso8601String(),
        updateTime: DateTime.now().toIso8601String(),
      ),
      Memo(
        id: 'memo-2',
        content: 'Second test memo',
        createTime:
            DateTime.now().subtract(const Duration(days: 2)).toIso8601String(),
        updateTime:
            DateTime.now().subtract(const Duration(hours: 1)).toIso8601String(),
      ),
    ];

    // Stub listMemos for initial app load
    when(
      mockApiService.listMemos(
        parent: anyNamed('parent'),
        filter: anyNamed('filter'),
        state: anyNamed('state'),
        sort: anyNamed('sort'),
        direction: anyNamed('direction'),
        pageSize: anyNamed('pageSize'),
        pageToken: anyNamed('pageToken'),
        tags: anyNamed('tags'),
        visibility: anyNamed('visibility'),
        contentSearch: anyNamed('contentSearch'),
        createdAfter: anyNamed('createdAfter'),
        createdBefore: anyNamed('createdBefore'),
        updatedAfter: anyNamed('updatedAfter'),
        updatedBefore: anyNamed('updatedBefore'),
        timeExpression: anyNamed('timeExpression'),
        useUpdateTimeForExpression: anyNamed('useUpdateTimeForExpression'),
      ),
    ).thenAnswer(
      (_) async => PaginatedMemoResponse(memos: testMemos, nextPageToken: null),
    );
  });

  testWidgets('App loads and displays title', (WidgetTester tester) async {
    // Define initial states for mocks
    final initialMultiServerState = MultiServerConfigState(
      servers: [
        ServerConfig(
          id: 'mock-id',
          name: 'Mock Server',
          serverUrl: 'http://mock.test',
          authToken: 'mock-token',
        ),
      ],
      activeServerId: 'mock-id',
      defaultServerId: 'mock-id',
    );
    // Define initial theme mode (adjust based on your theme provider)
    final initialThemeMode = ThemeMode.dark; // Remove const

    // Build our app and trigger a frame
    await tester.pumpWidget(
      ProviderScope(
        overrides: [
          providers.apiServiceProvider.overrideWithValue(mockApiService),
          // Override multi-server config provider to return mock state immediately
          multiServerConfigProvider.overrideWith(
            // Provide a simple notifier that holds the initial state
            (_) => MockMultiServerConfigNotifier(initialMultiServerState),
          ),
          // Override theme mode provider (adjust based on your implementation)
          // Example: Assuming a simple themeModeProvider exists
          themeModeProvider.overrideWith((ref) => initialThemeMode),
          // If loadServerConfigProvider is used, override it to complete immediately
          loadServerConfigProvider.overrideWith((ref) => Future.value()),
        ],
        child: const MyApp(),
      ),
    );

    // Verify that our app initializes correctly using Cupertino widgets
    // CupertinoPageScaffold might appear multiple times if nested, use findsWidgets
    expect(find.byType(CupertinoPageScaffold), findsWidgets);
    // Removed check for specific title text find.text('Flutter Memos')

    // Wait for all animations/futures to complete (should finish quickly now)
    await tester.pumpAndSettle();

    // Verify CupertinoNavigationBar exists instead of AppBar
    // CupertinoNavigationBar might appear multiple times, use findsWidgets
    expect(find.byType(CupertinoNavigationBar), findsWidgets);
  });
}
