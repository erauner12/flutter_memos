import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_memos/models/comment.dart';
import 'package:flutter_memos/models/memo.dart';
import 'package:flutter_memos/providers/api_providers.dart';
import 'package:flutter_memos/screens/memo_detail/memo_detail_screen.dart';
import 'package:flutter_memos/services/api_service.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

// Generate mock for ApiService
@GenerateMocks([ApiService])

// Mock for ApiService
// We don't need this class as we're using the MockApiService generated by Mockito

// Mock for NavigatorObserver
class MockNavigatorObserver extends Mock implements NavigatorObserver {}

// Helper functions for UI testing from the original test
extension WidgetTesterExtensions on WidgetTester {
  Future<void> enterComment(String commentText) async {
    final textField = find.byType(TextField);
    expect(textField, findsOneWidget);

    await tap(textField);
    await pump();

    await enterText(textField, commentText);
    await pump();
  }

  Future<bool> isCommentVisible(String commentText) async {
    final textWidget = find.text(commentText);
    return textWidget.evaluate().isNotEmpty;
  }

  Future<void> pressEscapeKey() async {
    await sendKeyEvent(LogicalKeyboardKey.escape);
    await pump();
  }

  Future<void> sendKeyEvent(LogicalKeyboardKey key) async {
    await simulateKeyDownEvent(key);
    await pump();
    await simulateKeyUpEvent(key);
    await pump();
  }

  Finder findWidgetWithText(Type widgetType, String text) {
    return find.ancestor(
      of: find.text(text),
      matching: find.byType(widgetType),
    );
  }
}

// Helper for attaching mocks to providers
extension ProviderContainerExtensions on ProviderContainer {
  List<Override> getAllProviderOverrides() {
    final List<Override> overrides = [];
    return overrides;
  }
}

void main() {
  late MockApiService mockApiService;
  late Memo testMemo;
  late List<Comment> testComments;

  setUp(() {
    mockApiService = MockApiService();

    testMemo = Memo(
      id: 'test-memo-id',
      content: '# Test Memo\nThis is a test memo content.',
      pinned: false,
      createTime: DateTime.now().subtract(const Duration(days: 1)).toIso8601String(),
      updateTime: DateTime.now().toIso8601String(),
    );

    testComments = [
      Comment(
        id: 'comment-1',
        content: 'This is comment 1',
        createTime: DateTime.now().millisecondsSinceEpoch,
      ),
      Comment(
        id: 'comment-2',
        content: 'This is comment 2',
        createTime: DateTime.now().millisecondsSinceEpoch - 60000,
      ),
    ];

    when(mockApiService.getMemo(argThat(isA<String>()))).thenAnswer((
      invocation,
    ) async {
      final id = invocation.positionalArguments[0] as String;
      if (id == testMemo.id) {
        return testMemo;
      }
      throw Exception('Memo not found: $id');
    });

    when(mockApiService.listMemoComments(argThat(isA<String>()))).thenAnswer((
      invocation,
    ) async {
      final memoId = invocation.positionalArguments[0] as String;
      if (memoId == testMemo.id) {
        return testComments;
      }
      return [];
    });
  });

  group('MemoDetailScreen Focus Management Tests', () {
    testWidgets('should focus comment field when shortcut is pressed', (
      WidgetTester tester,
    ) async {
      // Setup the mock
      when(mockApiService.getMemo(any)).thenAnswer((_) async => testMemo);
      when(
        mockApiService.listMemoComments(any),
      ).thenAnswer((_) async => testComments);
      
      await tester.pumpWidget(
        ProviderScope(
          overrides: [apiServiceProvider.overrideWithValue(mockApiService)],
          child: const MaterialApp(
            home: MemoDetailScreen(memoId: 'test-memo-id'),
          ),
        ),
      );

      await tester.pumpAndSettle();

      await tester.sendKeyEvent(LogicalKeyboardKey.slash);
      await tester.pump();

      expect(find.byType(TextField), findsOneWidget);
      final TextField textField = tester.widget(find.byType(TextField));
      expect(textField.focusNode?.hasFocus, isTrue);
    });

    testWidgets('should unfocus comment field on Escape key press', (
      WidgetTester tester,
    ) async {
      // Setup the mock
      when(mockApiService.getMemo(any)).thenAnswer((_) async => testMemo);
      when(
        mockApiService.listMemoComments(any),
      ).thenAnswer((_) async => testComments);
      
      await tester.pumpWidget(
        ProviderScope(
          overrides: [apiServiceProvider.overrideWithValue(mockApiService)],
          child: const MaterialApp(
            home: MemoDetailScreen(memoId: 'test-memo-id'),
          ),
        ),
      );

      await tester.pumpAndSettle();

      await tester.sendKeyEvent(LogicalKeyboardKey.slash);
      await tester.pump();

      expect(find.byType(TextField), findsOneWidget);
      TextField textField = tester.widget(find.byType(TextField));
      expect(textField.focusNode?.hasFocus, isTrue);

      await tester.pressEscapeKey();
      await tester.pump();

      textField = tester.widget(find.byType(TextField));
      expect(textField.focusNode?.hasFocus, isFalse);
    });
  });

  testWidgets('MemoDetailScreen displays memo content', (
    WidgetTester tester,
  ) async {
    // Setup the mock
    when(mockApiService.getMemo(any)).thenAnswer((_) async => testMemo);
    when(
      mockApiService.listMemoComments(any),
    ).thenAnswer((_) async => testComments);

    try {
      await tester.pumpWidget(
        ProviderScope(
          overrides: [apiServiceProvider.overrideWithValue(mockApiService)],
          child: const MaterialApp(
            home: MemoDetailScreen(memoId: 'test-memo-id'),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('# Test Memo'), findsOneWidget);
      expect(find.text('This is a test memo content.'), findsOneWidget);

      expect(find.text('This is comment 1'), findsOneWidget);
      expect(find.text('This is comment 2'), findsOneWidget);
    } catch (e) {
      fail('Test failed: $e');
    }
  });
}
