import 'package:flutter_memos/models/comment.dart';
import 'package:flutter_memos/models/note_item.dart';
import 'package:flutter_memos/models/server_config.dart'; // Assuming ServerType enum is here

/// Utility functions for migrating data between different server types.
class MigrationUtils {
  /// Adapts a NoteItem from a source server format to a target server format.
  ///
  /// - Maps states and visibilities based on target capabilities.
  /// - Sets the provided `targetResourcesMetadata` (obtained after uploading resources to the target).
  /// - Clears fields unsuitable for creation (like ID).
  static NoteItem adaptNoteForTarget(
    NoteItem sourceNote,
    ServerType targetType,
    List<Map<String, dynamic>> targetResourcesMetadata,
  ) {
    NoteState targetState;
    NoteVisibility targetVisibility;

    switch (targetType) {
      case ServerType.blinko:
        // Blinko mapping: Only normal/archived state, only private visibility
        targetState = (sourceNote.state == NoteState.archived)
            ? NoteState.archived
            : NoteState.normal;
        targetVisibility = NoteVisibility.private;
        break;
      case ServerType.memos:
      default:
        // Memos mapping: Keep original state and visibility
        targetState = sourceNote.state;
        targetVisibility = sourceNote.visibility;
        break;
    }

    return NoteItem(
      id: '', // ID should be generated by the target server
      content: sourceNote.content,
      pinned: sourceNote.pinned,
      state: targetState,
      visibility: targetVisibility,
      // Keep original create time? Target might override. Let's keep it for now.
      createTime: sourceNote.createTime,
      // Update time will be set by the target server on creation
      updateTime: DateTime.now().toUtc(),
      // Display time - use createTime or updateTime? Let's use createTime.
      displayTime: sourceNote.createTime,
      tags: sourceNote.tags, // Assuming tags are compatible string lists
      // Use the resource metadata returned by the target server after upload
      resources: targetResourcesMetadata,
      // Relations might need more complex mapping if IDs change format (e.g., string vs number)
      // For now, let's assume relations are not migrated or handled separately.
      relations: const [],
      // Creator ID might not be relevant or mappable on the target
      creatorId: null, // Or try to map if possible, otherwise null
      parentId: null, // Parent ID likely invalid on target server
      startDate: sourceNote.startDate, // Copy if target supports
      endDate: sourceNote.endDate, // Copy if target supports
    );
  }

  /// Adapts a Comment from a source server format to a target server format.
  ///
  /// - Maps states based on target capabilities.
  /// - Clears fields unsuitable for creation (like ID).
  static Comment adaptCommentForTarget(
    Comment sourceComment,
    ServerType targetType,
    // Add targetResourcesMetadata if comments ever support resources directly
  ) {
    CommentState targetState;

    switch (targetType) {
      case ServerType.blinko:
        // Blinko mapping: Map deleted/archived to archived, otherwise normal
        targetState = (sourceComment.state == CommentState.archived ||
                sourceComment.state == CommentState.deleted)
            ? CommentState.archived
            : CommentState.normal;
        break;
      case ServerType.memos:
      default:
        // Memos mapping: Keep original state (map deleted to archived if needed)
        targetState = (sourceComment.state == CommentState.deleted)
            ? CommentState.archived
            : sourceComment.state;
        break;
    }

    return Comment(
      id: 'temp_adapted_${DateTime.now().millisecondsSinceEpoch}',
      content: sourceComment.content,
      createdTs: sourceComment.createdTs, // Correct field name
      updatedTs: sourceComment.updatedTs,
      creatorId: sourceComment.creatorId,
      pinned: sourceComment.pinned,
      state: targetState,
      resources: [], // Resources are handled at the note level
      parentId: '', // Parent ID will be set by the createNoteComment call
      serverId: '', // Server ID will be set by the createNoteComment call
    );
  }
}
